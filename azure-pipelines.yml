trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'x64'

steps:
- powershell: |
    $filePath = "Common"
    if (-not (Test-Path $filePath)) {
        Write-Output "The file '$filePath' does not exist."
        exit 1  # Fail the task
    } else {
        Write-Output "The file '$filePath' exists."
  displayName: 'Check File Existence'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --platform $(BuildPlatform)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '**/WebApplication1Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --collect:"Code coverage"'
    publishTestResults: true

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'trx'
    testResultsFiles: '**/TestResults/*.trx'
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@2
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '**/TestResults/coverage.cobertura.xml'
    reportDirectory: '$(Build.ArtifactStagingDirectory)/coverage'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    publishWebProjects: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'dll_file'
    publishLocation: 'Container'
